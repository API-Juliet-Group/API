@*
    Author: Johan Ahlqvist
    * Edited for use of ServiceClient: Tobias Svensson

*@
@page "/minprofil"
@using JulietBlazorApp.Providers
@using JulietBlazorApp.Services
@using JulietBlazorApp.Services.Authentication
@using JulietBlazorApp.Services.Base
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider authStateProvider
@inject IClient httpClient
@inject NavigationManager navManager
@inject IMäklareDtoService mäklarService

<h3>Profil</h3>
<EditForm Model="profil" OnSubmit="UpdateUser" FormName="MäklareDto">
    <div class="col-md-4">
        <div class="row">
            @if (!string.IsNullOrEmpty(profil.BildURL))
            {
                <img class="profil-image" src="@profil.BildURL" alt="Mäklarens profilbild">
            }
            else
            {
                <img class="profil-image" src="/images/userPlaceholder.png" alt="Mäklarens profilbild">
            }
            <div class="mb-2">
                <label for="imageURL" class="form-label mb-1">Bild URL</label>
                <input type="text" class="form-control" id="imageURL" @bind="profil.BildURL">
            </div>
        </div>
        <div class="mb-2">
            <label for="FirstName" class="form-label mb-1">Förnamn</label>
            <input type="text" class="form-control" id="FirstName" @bind="profil.Förnamn" required>
        </div>
        <div class="mb-2">
            <label for="LastName" class="form-label mb-1">Efternamn</label>
            <input type="text" class="form-control" id="LastName" @bind="profil.Efternamn" required>
        </div>
    </div>
    <div class="d-flex justify-content-end">
        <button type="submit" class="btn btn-primary">Spara</button>
    </div>

</EditForm>

@code {
    private MäklareDto profil = new MäklareDto();
    private string? mäklarId;

    private string? successMessage;

    protected override async Task OnInitializedAsync()
    {
        mäklarId = await ((ApiAuthenticationStateProvider)authStateProvider).GetId();
        profil = await mäklarService.GetMäklareAsync(mäklarId);
    }


    private async Task UpdateUser()
    {
        try
        {
            if(mäklarId != null)
            {
                await mäklarService.UpdateMäklareAsync(profil, mäklarId);
            }

        }
        catch (ApiException ex)
        {
            if (ex.StatusCode >= 200 && ex.StatusCode <= 299)
            {
                navManager.NavigateTo("/");
            }
        }
    }
}
