@*
    Author: Tobias Svensson
*@
@page "/bostäder"
@using BaseLibrary.DTO
@using JulietBlazorApp.Classes
@inject BostadDtoService BostadDtoService
@inject BostadBildDtoService BostadBildDtoService
@inject BostadKategoriDtoService BostadKategoriDtoService


<section id="Bostads-Filter">
    <div class="row">
        <div class="col-md-3">
            @if(kommuner != null)
            {
                <select @bind="selectedKommun" class="form-select">
                    <option value="">-- Alla Kommuner --</option>
                    @foreach (var kommun in kommuner)
                    {
                        <option value="@kommun.KommunNamn">@kommun.VisningsNamn</option>
                    }
                </select>
            }

            @if (bostadKategorier != null)
            {
                <div class="col mt-3">
                    @foreach (var kategori in bostadKategorier)
                    {
                        <div>
                            <input type="checkbox" id="@kategori.Namn" checked="@selectedKategorier.Contains(kategori.Namn)" @onchange="@(e => ToggleKategori(kategori.Namn))" />
                            <label for="@kategori.Namn">@kategori.Namn</label>
                        </div>
                    }
                </div>
            }
        </div>
        <div class="col mt-5">
            <div class ="row">
                <div class="form-group">
                    <label id="utgångsprisLabel" for="UtgångsPrisMin UtgångsPrisMax">Utgångspris</label>
                    <input type="number" id="UtgångsPrisMin" placeholder="Min Utgångspris" @bind="minUtgangsPris" />
                    -
                    <input type="number" id="UtgångsPrisMax" placeholder="Max Utgångspris" @bind="maxUtgangsPris" />
                    kr
                </div>
                <div class="form-group">
                    <label id="BoArea" for="MinBoArea MaxBoArea">Boarea</label>
                    <input type="number" id="MinBoArea" placeholder="Min BoArea" @bind="minBoArea" />
                    -
                    <input type="number" id="MaxBoArea" placeholder="Max BoArea" @bind="maxBoArea" />
                    m²
                </div>
                <div class="form-group">
                    <label id="Ruml" for="MinRum MaxRum">Antal rum&nbsp&nbsp&nbsp</label>
                    <input type="number" id="MinRum" placeholder="Min Rum" @bind="minRum" />
                    -
                    <input type="number" id="MaxRum" placeholder="Max Rum" @bind="maxRum" />
                    st
                </div>
            </div>
        </div>
    </div>
</section>

<section id="Bostäder">
    <h1>Bostäder</h1>

    @if (bostäder != null)
    {
        var filteredBostader = FilterBostader(bostäder);

            var bostadCount = filteredBostader.Count();

        @for (int i = 0; i < bostadCount; i += bostäderPerRow)
        {
                var bostadRowList = filteredBostader.Skip(i).Take(bostäderPerRow).ToList();

            <div class="row mt-3">
                <VisaBostäder Bostäder="@bostadRowList" BostadsBilder="@bostadsBilder"></VisaBostäder>
            </div>
        }
    }
    else
    {
        <div class="loading-indicator">
            <img src="/images/loadingIndicator.gif" alt="Loading..." />
        </div>
    }

</section>


@code {
    private IEnumerable<BostadDto> bostäder;
    private IEnumerable<BostadBildDto> bostadsBilder;
    private IEnumerable<BostadKategoriDto> bostadKategorier;
    private IEnumerable<KommunInfo> kommuner;

    private List<string> selectedKategorier = new List<string>();
    private string selectedKommun;
    private decimal minUtgangsPris;
    private decimal maxUtgangsPris = 10000000;
    private decimal minBoArea;
    private decimal maxBoArea = 300;
    private decimal minRum;
    private decimal maxRum = 10;

    const int bostäderPerRow = 4;

    protected override async Task OnInitializedAsync()
    {
        bostäder = await BostadDtoService.GetBostäderAsync();
        bostadsBilder = await BostadBildDtoService.GetBostadsBilderAsync();

        kommuner = GetRelevantaKommuner(bostäder);
        bostadKategorier = await BostadKategoriDtoService.GetBostadKategorierAsync();
    }

    //Denna metod filtrerar en lista av bostäder baserat på vald kommun, kategorier och even min och max för Utgångspris, BoArea och antal Rum.
    private IEnumerable<BostadDto> FilterBostader(IEnumerable<BostadDto> bostäder)
    {
        var filteredBostäder = bostäder;

        if (!string.IsNullOrEmpty(selectedKommun))
        {
            filteredBostäder = filteredBostäder.Where(b => b.Kommun == selectedKommun);
        }

        if (selectedKategorier != null && selectedKategorier.Any())
        {
            filteredBostäder = filteredBostäder.Where(b => selectedKategorier.Contains(b.Kategori));
        }

        filteredBostäder = filteredBostäder.Where(b =>
            b.Utgångspris >= minUtgangsPris && b.Utgångspris <= maxUtgangsPris &&
            b.Boarea >= minBoArea && b.Boarea <= maxBoArea &&
            b.Antalrum >= minRum && b.Antalrum <= maxRum);

        return filteredBostäder;
    }

    //Denna metod skapar en lista med KommunInfo-objekt, där varje objekt representerar en kommun tillsammans med antalet associerade bostäder.
    private List<KommunInfo> GetRelevantaKommuner(IEnumerable<BostadDto> bostader)
    {
        var relevantKommuner = bostader
            .GroupBy(b => b.Kommun)
            .Select(group => new KommunInfo
                {
                    KommunNamn = group.Key,
                    BostadCount = group.Count()
                })
            .ToList();

        return relevantKommuner;
    }

    //Hanterar listan av valda kategorier (selectedKategorier) då något händer med checkboxen.
    private void ToggleKategori(string kategori)
    {
        if (selectedKategorier.Contains(kategori))
        {
            selectedKategorier.Remove(kategori);
        }
        else
        {
            selectedKategorier.Add(kategori);
        }
    }
}